{
  "version": 3,
  "sources": ["../../../../build/src/Client/ExperienceSystem.js"],
  "sourcesContent": ["\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ExperienceSystem = void 0;\r\nconst __1 = require(\"../..\");\r\nclass ExperienceSystem {\r\n    constructor(receivedMessage) {\r\n        this.multiplier = 1;\r\n        this.message = receivedMessage;\r\n    }\r\n    SelectMultiplier(length) {\r\n        return length < 10 ? 0.3 : length >= 10 && length < 30 ? 1 : 1.5;\r\n    }\r\n    expRequired(level) {\r\n        return 16 * level * level + 150 * level + 100;\r\n    }\r\n    GainExperience() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const row = yield __1.prisma.experiences.findFirst({\r\n                where: { serverid: this.message.guildId, userid: this.message.author.id },\r\n            });\r\n            this.multiplier = this.SelectMultiplier(this.message.content.length);\r\n            const pointsToAdd = this.GenerateExperience();\r\n            if (row) {\r\n                if (row.points + pointsToAdd > this.expRequired(row.level)) {\r\n                    yield __1.prisma.experiences.update({\r\n                        where: { id: row.id },\r\n                        data: { points: { increment: pointsToAdd }, level: { increment: 1 } },\r\n                    });\r\n                    this.message.channel.send(`Congratulations <@${this.message.author.id}>, you just reached level ${row.level + 1}!`);\r\n                }\r\n                else {\r\n                    yield __1.prisma.experiences.update({\r\n                        where: { id: row.id },\r\n                        data: { points: { increment: pointsToAdd } },\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                yield __1.prisma.experiences.create({\r\n                    data: {\r\n                        serverid: this.message.guildId,\r\n                        userid: this.message.author.id,\r\n                        points: pointsToAdd,\r\n                        level: 0,\r\n                    },\r\n                });\r\n            }\r\n            __1.client.talkedRecentlyExp.push({\r\n                guildID: this.message.guildId,\r\n                userID: this.message.author.id,\r\n            });\r\n            setTimeout(() => {\r\n                try {\r\n                    __1.client.talkedRecentlyExp.splice(__1.client.talkedRecentlyExp.indexOf({\r\n                        guildID: this.message.guildId,\r\n                        userID: this.message.author.id,\r\n                    }), 1);\r\n                }\r\n                catch (err) {\r\n                    console.error(err);\r\n                }\r\n            }, 30000);\r\n        });\r\n    }\r\n    GenerateExperience() {\r\n        let pointsAdded = Math.floor((Math.random() * (10 - 4 + 1) + 4) * this.multiplier);\r\n        return pointsAdded;\r\n    }\r\n}\r\nexports.ExperienceSystem = ExperienceSystem;\r\n"],
  "mappings": "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",
  "names": []
}
