{
  "version": 3,
  "sources": ["../../../src/Client/Client.ts"],
  "sourcesContent": ["import {\n  ApplicationCommandDataResolvable,\n  Client,\n  ClientEvents,\n  Collection,\n} from \"discord.js\";\n\nrequire(\"dotenv\").config();\n\nimport { CommandType } from \"../Commands\";\nimport {\n  CommandsCooldown,\n  ExpCooldown,\n  RegisterCommandOptions,\n} from \"../Typings/ClientTypes\";\nimport { Event } from \"../Typings/Events\";\nimport glob from \"glob\";\nimport { promisify } from \"util\";\nconst globPromise = promisify(glob);\n\nexport class ExtendedClient extends Client {\n  commands: Collection<string, CommandType> = new Collection();\n  talkedRecentlyExp: Array<ExpCooldown> = [];\n  talkedRecentlyMoney: Array<string> = [];\n  commandCooldown: Array<CommandsCooldown> = [];\n  constructor() {\n    super({ intents: 32767 });\n  }\n  start() {\n    this.registerModules();\n    this.login(process.env.TOKEN);\n  }\n  async importFile(filePath: string) {\n    return (await import(filePath))?.default;\n  }\n  async registerCommands(options: RegisterCommandOptions) {\n    if (options.guildId) {\n      this.guilds.cache.get(options.guildId)?.commands.set(options.commands);\n      console.log(`Registering commands to ${options.guildId}`);\n    } else {\n      this.application?.commands.set(options.commands);\n      console.log(\"Registering global commands\");\n    }\n  }\n  async registerModules() {\n    const slashCommands: ApplicationCommandDataResolvable[] = [];\n    const commandFiles = await globPromise(`**/src/Commands/*(*.ts)`);\n    commandFiles.forEach(async (filePath: string) => {\n      const command: CommandType = await this.importFile(\n        `${require.main?.path}/${filePath}`\n      );\n      if (!command.name) return;\n      this.commands.set(command.name, command);\n      slashCommands.push(command);\n    });\n    const eventFiles = await globPromise(`**/src/Events/*(*.ts)`);\n    eventFiles.forEach(async (filePath: string) => {\n      const event: Event<keyof ClientEvents> = await this.importFile(\n        `${require.main?.path}/${filePath}`\n      );\n      this.on(event.event, event.run);\n    });\n    this.on(\"ready\", () => {\n      this.registerCommands({\n        commands: slashCommands,\n      });\n    });\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAKO;AAWP,kBAAiB;AACjB,kBAA0B;AAV1B,QAAQ,QAAQ,EAAE,OAAO;AAWzB,MAAM,kBAAc,uBAAU,YAAAA,OAAI;AAE3B,MAAM,uBAAuB,sBAAO;AAAA,EAKzC,cAAc;AACZ,UAAM,EAAE,SAAS,MAAM,CAAC;AAL1B,oBAA4C,IAAI,0BAAW;AAC3D,6BAAwC,CAAC;AACzC,+BAAqC,CAAC;AACtC,2BAA2C,CAAC;AAAA,EAG5C;AAAA,EACA,QAAQ;AACN,SAAK,gBAAgB;AACrB,SAAK,MAAM,QAAQ,IAAI,KAAK;AAAA,EAC9B;AAAA,EACA,MAAM,WAAW,UAAkB;AAhCrC;AAiCI,YAAQ,WAAM,OAAO,cAAb,mBAAyB;AAAA,EACnC;AAAA,EACA,MAAM,iBAAiB,SAAiC;AAnC1D;AAoCI,QAAI,QAAQ,SAAS;AACnB,iBAAK,OAAO,MAAM,IAAI,QAAQ,OAAO,MAArC,mBAAwC,SAAS,IAAI,QAAQ;AAC7D,cAAQ,IAAI,2BAA2B,QAAQ,SAAS;AAAA,IAC1D,OAAO;AACL,iBAAK,gBAAL,mBAAkB,SAAS,IAAI,QAAQ;AACvC,cAAQ,IAAI,6BAA6B;AAAA,IAC3C;AAAA,EACF;AAAA,EACA,MAAM,kBAAkB;AACtB,UAAM,gBAAoD,CAAC;AAC3D,UAAM,eAAe,MAAM,YAAY,yBAAyB;AAChE,iBAAa,QAAQ,OAAO,aAAqB;AA/CrD;AAgDM,YAAM,UAAuB,MAAM,KAAK;AAAA,QACtC,IAAG,aAAQ,SAAR,mBAAc,QAAQ;AAAA,MAC3B;AACA,UAAI,CAAC,QAAQ;AAAM;AACnB,WAAK,SAAS,IAAI,QAAQ,MAAM,OAAO;AACvC,oBAAc,KAAK,OAAO;AAAA,IAC5B,CAAC;AACD,UAAM,aAAa,MAAM,YAAY,uBAAuB;AAC5D,eAAW,QAAQ,OAAO,aAAqB;AAxDnD;AAyDM,YAAM,QAAmC,MAAM,KAAK;AAAA,QAClD,IAAG,aAAQ,SAAR,mBAAc,QAAQ;AAAA,MAC3B;AACA,WAAK,GAAG,MAAM,OAAO,MAAM,GAAG;AAAA,IAChC,CAAC;AACD,SAAK,GAAG,SAAS,MAAM;AACrB,WAAK,iBAAiB;AAAA,QACpB,UAAU;AAAA,MACZ,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AACF;",
  "names": ["glob"]
}
